// Generated by https://quicktype.io

export interface IWorkspace {
    version: number;
    projects: IProjects;
    cli: ICli;
    defaultProject: string;
}

export interface ICli {
    defaultCollection: string;
}

export type IProjects = Record<string, IPlugin>;

export interface IPlugin {
    root: string;
    sourceRoot: string;
    projectType: string;
    prefix: string;
    schematics: object;
    architect: IArchitect;
}

export interface IArchitect {
    build: Build;
    serve: Serve;
    lint: Lint;
    test: Test;
}

export interface Build {
    builder: string;
    options: BuildOptions;
    configurations: Configurations;
}

export interface Configurations {
    production: Production;
}

export interface Production {
    optimization: boolean;
    extractLicenses: boolean;
    inspect: boolean;
    fileReplacements: FileReplacement[];
}

export interface FileReplacement {
    replace: string;
    with: string;
}

export interface BuildOptions {
    outputPath: string;
    main: string;
    tsConfig: string;
    assets: string[];
}

export interface Lint {
    builder: string;
    options: LintOptions;
}

export interface LintOptions {
    linter: string;
    tsConfig: string[];
    exclude: string[];
}

export interface Serve {
    builder: string;
    options: ServeOptions;
}

export interface ServeOptions {
    buildTarget: string;
}

export interface Test {
    builder: string;
    options: TestOptions;
}

export interface TestOptions {
    jestConfig: string;
    tsConfig: string;
    passWithNoTests: boolean;
}
